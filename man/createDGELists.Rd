% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rollup.R
\name{createDGELists}
\alias{createDGELists}
\title{Create a list of edgeR DGEList object from salmon quants}
\usage{
createDGELists(
  quant_sfs,
  qnames,
  seq_anno,
  select_feature,
  cpus = 2,
  norm_method = "RLE",
  norm_level = "gene",
  ...
)
}
\arguments{
\item{quant_sfs}{The salmon quant.sf files path.}

\item{qnames}{Human-readable names for each quant.sf file.}

\item{seq_anno}{Output of \link{prepareSeq} function.}

\item{select_feature}{Type of feature. Available choices are:
'all', 'exon', 'intron', 'gene', or 'intergenic'.}

\item{cpus}{Number of threads.}

\item{norm_method}{Normalization method for edgeR.}

\item{norm_level}{Normalization feature level for edgeR.}

\item{...}{Parameters will be passed to \link[edgeR:DGEList]{DGEList}.
Please note, the default norm.factors and lib.size will be calculated
at gene level.}
}
\value{
A list of DGEList objects.
}
\description{
Create a list of edgeR DGEList object for repeat elements from salmon quants.
}
\examples{
quant_sfs <- dir(system.file('extdata', 'RNA-seq', package='ratte'),
        'quant.sf',
 full.names=TRUE)
qnames <- sub("^.*\\\\/(.*?).quant.sf", "\\\\1", quant_sfs)
rmsk <- readRDS(system.file('extdata', 'danRer11_rmsk_chr25_sub.RDS',
                             package='ratte'))

library(BSgenome.Drerio.UCSC.danRer11) # for sequences
library(TxDb.Drerio.UCSC.danRer11.refGene) # for genomic annotation
seq_anno <- prepareSeq(Drerio,
           TxDb.Drerio.UCSC.danRer11.refGene,
           rmsk,
           subsetGRanges=GRanges('chr25:11000000-15000000'))
ys <- createDGELists(quant_sfs, qnames, seq_anno, 'all',
                     group=sub('.rep.', '', qnames))
ys[[1]]
names(ys)
library(edgeR)
res <- lapply(ys, function(y){
  keep <- filterByExpr(y)
  y <- y[keep, keep.lib.sizes=TRUE]
  design <- model.matrix(~y$samples$group)
  y <- estimateDisp(y, design)
  fit <- glmFit(y, design)
  lrt <- glmLRT(fit, coef=2)
  topTags(lrt, n=nrow(lrt))
})
tt <- as.data.frame(res[[1]])
plot(tt$logFC, -10*log10(tt$PValue),
   xlab='logFC', ylab='-10logP')
}
